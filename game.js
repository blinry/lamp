// Generated by CoffeeScript 1.10.0
(function() {
  var cheeses, enterReady, fireflies, flies, hBorder, hole, initGame, initIntro, isDown, keydown, keys, keyup, lamp, lampHeight, lightOff, lightOn, line, mouse, newCheese, newFly, nextFunc, phase, preload, queue, rand, room, socket, spaceReady, stage, switchLight, text, tick, title, vBorder, win;

  rand = function(min, max) {
    return Math.floor(Math.random() * (max - min + 1) + min);
  };

  stage = null;

  queue = null;

  lamp = null;

  flies = [];

  cheeses = [];

  win = null;

  mouse = null;

  room = null;

  fireflies = [];

  socket = null;

  hole = null;

  keys = {};

  lampHeight = null;

  lightOn = true;

  text = null;

  title = null;

  nextFunc = null;

  spaceReady = true;

  enterReady = true;

  hBorder = 150;

  vBorder = 50;

  phase = "intro";

  preload = function() {
    var loading, manifest;
    stage = new createjs.Stage("canvas");
    loading = new createjs.Text("Loading...", "30px Helvetica", "white");
    loading.x = 300;
    loading.y = 300;
    stage.addChild(loading);
    stage.update();
    queue = new createjs.LoadQueue(false);
    queue.installPlugin(createjs.Sound);
    manifest = [
      {
        src: "on.wav",
        id: "on"
      }, {
        src: "off.wav",
        id: "off"
      }, {
        src: "bsss.wav",
        id: "bsss"
      }, {
        src: "nom.wav",
        id: "nom"
      }, {
        src: "omnomnom.wav",
        id: "omnomnom"
      }, {
        src: "zap.wav",
        id: "zap"
      }, {
        src: "room.png",
        id: "room"
      }, {
        src: "pendulum.png",
        id: "pendulum"
      }, {
        src: "pendulum2.png",
        id: "pendulum2"
      }, {
        src: "lamp.png",
        id: "lamp"
      }, {
        src: "flylight.png",
        id: "flylight"
      }, {
        src: "fly.png",
        id: "fly"
      }, {
        src: "lovefly.png",
        id: "lovefly"
      }, {
        src: "window.png",
        id: "window"
      }, {
        src: "mouse.png",
        id: "mouse"
      }, {
        src: "socket.png",
        id: "socket"
      }, {
        src: "cheese.png",
        id: "cheese"
      }, {
        src: "title.png",
        id: "title"
      }
    ];
    queue.loadManifest(manifest);
    return queue.on("complete", function(event) {
      stage.removeChild(loading);
      return initIntro();
    });
  };

  initIntro = function() {
    var cable, pendulum;
    room = new createjs.Bitmap(queue.getResult("room"));
    stage.addChild(room);
    room.visible = false;
    pendulum = new createjs.Bitmap(queue.getResult("pendulum"));
    stage.addChild(pendulum);
    pendulum.visible = false;
    pendulum.x = 588;
    pendulum.y = 600 - 447;
    pendulum.regX = pendulum.getBounds().width / 2;
    pendulum.regY = 4;
    pendulum.time = 0;
    pendulum.on("tick", function(event) {
      pendulum.time += event.delta;
      return pendulum.rotation = Math.PI / 2 + Math.sin(pendulum.time / 1000 * Math.PI) * 10;
    });
    pendulum.on("click", function(event) {
      this.image = queue.getResult("pendulum2");
      return pendulum.regX = pendulum.getBounds().width / 2;
    });
    hole = {
      x: 700,
      y: 400
    };
    mouse = new createjs.Bitmap(queue.getResult("mouse"));
    stage.addChild(mouse);
    mouse.x = hole.x;
    mouse.y = hole.y;
    mouse.regY = mouse.getBounds().height / 2;
    mouse.regX = mouse.getBounds().width / 8;
    mouse.dir = 0;
    mouse.speed = 0;
    win = new createjs.Bitmap(queue.getResult("window"));
    stage.addChild(win);
    win.x = 250;
    win.y = 150;
    win.regX = win.getBounds().width / 2;
    win.regY = win.getBounds().height / 2;
    socket = new createjs.Bitmap(queue.getResult("socket"));
    stage.addChild(socket);
    socket.x = stage.canvas.width / 2;
    socket.y = 280;
    socket.regX = socket.getBounds().width / 2;
    socket.regY = socket.getBounds().height / 2;
    socket.scaleX = 0.5;
    socket.scaleY = 0.5;
    socket.visible = false;
    cable = new createjs.Shape();
    stage.addChild(cable);
    lamp = new createjs.Bitmap(queue.getResult("lamp"));
    stage.addChild(lamp);
    lamp.x = win.x;
    lamp.y = win.y;
    lamp.regX = lamp.getBounds().width / 2;
    lamp.regY = 50;
    lamp.speed = 0;
    lamp.cursor = "help";
    lamp.dx = 0;
    lamp.dy = 0;
    lamp.range = 400;
    lamp.strength = 1;
    lampHeight = 240;
    lamp.on("tick", function(event) {
      var maxY, speed;
      speed = 1 / 2;
      if (phase !== "intro") {
        if (isDown(37)) {
          this.dx -= event.delta * speed;
        }
        if (isDown(39)) {
          this.dx += event.delta * speed;
        }
        if (isDown(38)) {
          this.dy -= event.delta * speed;
        }
        if (isDown(40)) {
          this.dy += event.delta * speed;
        }
      }
      this.dx *= 0.5;
      this.dy *= 0.5;
      this.x += this.dx;
      this.y += this.dy;
      maxY = 300;
      if (this.y + lampHeight < 300 + vBorder) {
        this.y = 300 + vBorder - lampHeight;
      }
      if (this.y + lampHeight > 600 - vBorder) {
        this.y = 600 - lampHeight - vBorder;
      }
      if (this.x < hBorder) {
        this.x = hBorder;
      }
      if (this.x > stage.canvas.width - hBorder) {
        this.x = stage.canvas.width - hBorder;
      }
      return cable.graphics = new createjs.Graphics().s("black").ss(2, "round").mt(lamp.x, lamp.y + lampHeight).lt(socket.x, socket.y);
    });
    mouse.on("tick", function(event) {
      var cheese, dir, dist, fly, holeDist, i, index, j, k, lampDist, len, len1, len2, len3, m, minDist, nearestFood, toDelete, toDeleteC;
      holeDist = Math.sqrt(Math.pow(this.x - hole.x, 2) + Math.pow(this.y - hole.y, 2));
      if (holeDist < 20) {
        mouse.visible = false;
      } else {
        mouse.visible = true;
      }
      this.rotation = rand(-1, 1);
      lampDist = Math.sqrt(Math.pow(this.x - lamp.x, 2) + Math.pow(this.y - lamp.y, 2));
      if (phase === "end") {
        lampDist = Math.sqrt(Math.pow(this.x - lamp.x, 2) + Math.pow(this.y - (lamp.y + lampHeight), 2));
        if (lampDist > 60) {
          this.dir = Math.atan2(lamp.y + lampHeight - this.y, lamp.x - this.x);
          this.speed = 1 / 5;
        } else {
          this.rotation = 0;
          this.speed = 0;
        }
      } else if (lightOn && lampDist < lamp.range) {
        this.dir = Math.atan2(hole.y - this.y, hole.x - this.x);
        this.speed = 1 / 10;
      } else {
        toDelete = [];
        toDeleteC = [];
        nearestFood = null;
        minDist = 999999;
        for (i = 0, len = flies.length; i < len; i++) {
          fly = flies[i];
          if (!fly.floor) {
            continue;
          }
          dist = Math.sqrt(Math.pow(this.x - fly.x, 2) + Math.pow(this.y - fly.y, 2));
          if (dist < 10) {
            toDelete.push(fly);
            createjs.Sound.play("nom");
            createjs.Tween.get(this).to({
              x: this.x,
              y: this.y
            }, 1000);
            continue;
          } else if (dist < minDist && dist < fly.range) {
            minDist = dist;
            nearestFood = fly;
          }
        }
        for (j = 0, len1 = cheeses.length; j < len1; j++) {
          cheese = cheeses[j];
          dist = Math.sqrt(Math.pow(this.x - cheese.x, 2) + Math.pow(this.y - cheese.y, 2));
          if (dist < 10) {
            toDeleteC.push(cheese);
            createjs.Sound.play("omnomnom");
            createjs.Tween.get(this).to({
              x: this.x,
              y: this.y
            }, 3000);
            continue;
          } else if (dist < minDist && dist < 100) {
            minDist = dist;
            nearestFood = cheese;
          }
        }
        for (k = 0, len2 = toDelete.length; k < len2; k++) {
          fly = toDelete[k];
          stage.removeChild(fly);
          index = flies.indexOf(fly);
          flies.splice(index, 1);
        }
        for (m = 0, len3 = toDeleteC.length; m < len3; m++) {
          cheese = toDeleteC[m];
          stage.removeChild(cheese);
          index = cheeses.indexOf(cheese);
          cheeses.splice(index, 1);
        }
        if (nearestFood !== null) {
          dir = Math.atan2(nearestFood.y - this.y, nearestFood.x - this.x);
          this.dir = dir;
          this.speed = 1 / 20;
        } else {
          this.speed = 0;
          this.rotation = 0;
        }
      }
      if (this.dir > -Math.PI / 2 && this.dir < Math.PI / 2) {
        this.scaleX = -1;
      } else {
        this.scaleX = 1;
      }
      this.x += Math.cos(this.dir) * event.delta * this.speed;
      return this.y += Math.sin(this.dir) * event.delta * this.speed;
    });
    switchLight(true);
    text = new createjs.Text("(null)", "20px Helvetica", "white");
    text.x = 10;
    text.y = 610;
    stage.addChild(text);
    title = new createjs.Bitmap(queue.getResult("title"));
    stage.addChild(title);
    title.x = 400;
    title.y = 50;
    title.alpha = 0;
    line("You've always dreamed of being a superhero! (Press Enter)", function() {
      return line("Then, last month, a fairy gave you the ability to shapeshift!", function() {
        return line("But she forgot to tell you one important thing.", function() {
          return line("You would transform into the nearest object to you.", function() {
            createjs.Tween.get(title).to({
              alpha: 1
            }, 1000);
            return line("So, yeah. You're a floor lamp now. Congrats.", function() {
              createjs.Tween.get(title).to({
                alpha: 0
              }, 1000);
              phase = "tutorial";
              createjs.Tween.get(room).to({
                visible: true
              }, 1000);
              createjs.Tween.get(socket).to({
                visible: true
              }, 1000);
              createjs.Tween.get(pendulum).to({
                visible: true
              }, 1000);
              return line("Press Space to switch yourself on and off.", function() {
                stage.removeChild(title);
                return line("You can move around using the arrow keys.", function() {
                  return line("Besides that, there's not much to do.", function() {
                    var i, n;
                    for (n = i = 1; i <= 2; n = ++i) {
                      flies.push(newFly());
                    }
                    return line("See those fireflies? They seem to be... attracted to you.", function() {
                      return line("But also, they die when they touch you. Oh well.", function() {
                        return line("To be honest, being a floor lamp isn't terribly exciting.", function() {
                          return line("It's not like you envisioned your life as a superhero.", function() {
                            return line("But today, I've got a job for you:", function() {
                              return line("See that mousehole on the right?", function() {
                                initGame();
                                return line("And see that cheese lying around?", function() {
                                  return line("Make sure that Mr Mouse doesn't starve. Good luck!", function() {
                                    return line("", function() {
                                      return line("I'm sure you can figure out the rules by yourself!", function() {
                                        return line("But if you're stuck, here are some pointers:", function() {
                                          return line("Mr Mouse is a bit shy, and is scared of your light.", function() {
                                            return line("But Mr Mouse is attracted by dead fireflies.", function() {
                                              return line("Help him to eat all the cheese to win!", function() {
                                                return line("", function() {
                                                  return 1;
                                                });
                                              });
                                            });
                                          });
                                        });
                                      });
                                    });
                                  });
                                });
                              });
                            });
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
    createjs.Ticker.timingMode = createjs.Ticker.RAF_SYNCHED;
    createjs.Ticker.on("tick", tick);
    createjs.Ticker.setFPS(30);
    document.onkeydown = keydown;
    return document.onkeyup = keyup;
  };

  initGame = function() {
    cheeses.push(newCheese(200));
    cheeses.push(newCheese(300));
    cheeses.push(newCheese(400));
    return phase = "game";
  };

  tick = function(event) {
    var fly, glow, glowy, i, j, k, l, len, len1, len2, light, lights, ll;
    stage.update(event);
    if (phase === "game") {
      if (rand(1, 2000 / event.delta) === 1 && flies.length < 10 && lightOn) {
        flies.push(newFly());
      }
      if (cheeses.length === 0) {
        phase = "end";
        flies.push(newFly(true, true));
        line("Yay, you did it! (Press Enter)", function() {
          return line("You might not be the superhero you dreamed of...", function() {
            return line("But... you're definitely... MY hero today! <3 *squeak*", function() {
              return line("Thanks for playing!", function() {
                return 1;
              });
            });
          });
        });
      }
    }
    if (phase !== "intro") {
      lights = [];
      glow = [text];
      if (stage.getChildIndex(title) !== -1) {
        glow.push(title);
      }
      if (lightOn) {
        lights.push(lamp);
      } else {
        for (i = 0, len = flies.length; i < len; i++) {
          fly = flies[i];
          lights.push(fly);
        }
        glow.push(win);
      }
      l = new createjs.Container();
      for (j = 0, len1 = lights.length; j < len1; j++) {
        light = lights[j];
        ll = new createjs.Bitmap(queue.getResult("flylight"));
        ll.x = light.x;
        ll.y = light.y;
        ll.regX = ll.getBounds().width / 2;
        ll.regY = ll.getBounds().height / 2;
        ll.scaleX = light.range / 150;
        ll.scaleY = light.range / 150;
        ll.alpha = light.strength;
        l.addChild(ll);
      }
      for (k = 0, len2 = glow.length; k < len2; k++) {
        glowy = glow[k];
        l.addChild(glowy.clone());
      }
      l.cache(0, 0, 800, 650);
      stage.filters = [new createjs.AlphaMaskFilter(l.cacheCanvas)];
      return stage.cache(0, 0, 800, 650);
    }
  };

  keydown = function(event) {
    keys[event.keyCode] = true;
    if (phase !== "intro") {
      if (event.keyCode === 32 && spaceReady) {
        spaceReady = false;
        switchLight();
      }
    }
    if (event.keyCode === 13 && enterReady) {
      enterReady = false;
      return nextFunc();
    }
  };

  switchLight = function(silent) {
    var i, j, len, len1, object, objects, results, results1;
    if (silent == null) {
      silent = false;
    }
    objects = [lamp];
    lightOn = !lightOn;
    if (!lightOn) {
      if (!silent) {
        createjs.Sound.play("on");
      }
      results = [];
      for (i = 0, len = objects.length; i < len; i++) {
        object = objects[i];
        object.filters = [new createjs.ColorFilter(1, 1, 1, 1, -255, -255, -255, 0)];
        results.push(object.cache(0, 0, object.getBounds().width, object.getBounds().height));
      }
      return results;
    } else {
      if (!silent) {
        createjs.Sound.play("off");
      }
      results1 = [];
      for (j = 0, len1 = objects.length; j < len1; j++) {
        object = objects[j];
        results1.push(object.uncache());
      }
      return results1;
    }
  };

  keyup = function(event) {
    keys[event.keyCode] = false;
    if (event.keyCode === 32) {
      spaceReady = true;
    }
    if (event.keyCode === 13) {
      return enterReady = true;
    }
  };

  isDown = function(keyCode) {
    if (keys[keyCode]) {
      return true;
    } else {
      return false;
    }
  };

  newFly = function(window, love) {
    var border, fly;
    if (window == null) {
      window = true;
    }
    if (love == null) {
      love = false;
    }
    fly = new createjs.Bitmap(queue.getResult("fly"));
    if (love) {
      fly = new createjs.Bitmap(queue.getResult("lovefly"));
    }
    fly.regX = fly.getBounds().width / 2;
    fly.regY = fly.getBounds().height / 2;
    border = 100;
    if (window) {
      fly.x = rand(win.x - win.getBounds().width / 2, win.x + win.getBounds().width / 2);
    } else {
      fly.x = stage.canvas.width;
    }
    fly.y = rand(win.y - win.getBounds().height / 2, win.y + win.getBounds().height / 2);
    fly.dir = rand(0, 360) / 180 * Math.PI;
    fly.speed = 1 / 5;
    fly.range = 200;
    fly.strength = 0.5;
    if (love) {
      stage.addChild(fly);
    } else {
      stage.addChildAt(fly, stage.getChildIndex(socket));
    }
    createjs.Sound.play("bsss");
    fly.on("tick", function(event) {
      var dir, dist, dx, dy, index, pull, randDir, randStrength;
      dist = Math.sqrt(Math.pow(lamp.y - this.y, 2) + Math.pow(lamp.x - this.x, 2));
      if (this.dead) {
        this.strength -= 0.00002 * event.delta;
        this.alpha = this.strength * 2;
        this.range -= 0.005 * event.delta;
        if (this.strength <= 0) {
          stage.removeChild(this);
          index = flies.indexOf(fly);
          return flies.splice(index, 1);
        }
      } else {
        if (dist < 50 && lightOn && !love) {
          this.dead = true;
          createjs.Sound.play("zap", "any");
          return createjs.Tween.get(this).to({
            y: this.y + lampHeight,
            rotation: rand(150, 210)
          }, 500, createjs.Ease.quadIn).set({
            floor: true
          });
        } else {
          this.rotation = rand(-10, 10);
          pull = lightOn ? Math.sqrt(dist) / 1000 : 0;
          dir = Math.atan2(lamp.y - this.y, lamp.x - this.x);
          randDir = rand(0, 360) / 180 * Math.PI;
          randStrength = 1 / 20;
          dx = Math.cos(this.dir) * this.speed + Math.cos(dir) * pull + Math.cos(randDir) * randStrength;
          dy = Math.sin(this.dir) * this.speed + Math.sin(dir) * pull + Math.sin(randDir) * randStrength;
          this.dir = Math.atan2(dy, dx);
          this.speed = Math.sqrt(Math.pow(dy, 2) + Math.pow(dx, 2));
          if (this.speed > 1 / 5) {
            this.speed *= 0.8;
          }
          this.x += Math.cos(this.dir) * event.delta * this.speed;
          return this.y += Math.sin(this.dir) * event.delta * this.speed;
        }
      }
    });
    return fly;
  };

  newCheese = function(x) {
    var cheese;
    cheese = new createjs.Bitmap(queue.getResult("cheese"));
    cheese.regX = cheese.getBounds().width / 2;
    cheese.regY = cheese.getBounds().height / 2;
    stage.addChildAt(cheese, stage.getChildIndex(socket));
    cheese.x = x;
    cheese.y = rand(300 + vBorder, 600 - vBorder);
    cheese.alpha = 0;
    createjs.Tween.get(cheese).to({
      alpha: 1
    }, 2000);
    return cheese;
  };

  lightOff = function() {
    var fly, i, l, len, ll;
    l = new createjs.Container();
    for (i = 0, len = flies.length; i < len; i++) {
      fly = flies[i];
      ll = new createjs.Bitmap(queue.getResult("flylight"));
      ll.x = fly.x;
      ll.y = fly.y;
      l.addChild(ll);
      l.cache(0, 0, 800, 650);
    }
    stage.filters = [new createjs.AlphaMaskFilter(l.cacheCanvas)];
    return stage.cache(0, 0, 800, 650);
  };

  line = function(t, f) {
    text.text = t;
    return nextFunc = f;
  };

  window.onload = preload;

  window.addEventListener("keydown", function(e) {
    if ([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {
      return e.preventDefault();
    }
  }, false);

}).call(this);
